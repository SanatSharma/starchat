	1) When teacher connects, do nothing at the client side, except display connected
		a. Data Packet: {Type: teacherAdd}
	2) When center connects to a session
			i. Send connection confirmation to center
			ii. Send information of connection to teacher
			iii. Data Packet : {Type: centerAdd, Id: id, Name: center_name}
			iv. Add the center connection to both the default group as well as the an additional container
	3) When center disconnects from session
			i. Send removal information to the teacher
			ii. Data Packet: {Type: centerRemove, Id: id, Name: center_name}
			iii. Remove the connection from the group as well as the individual container
		
	4) Data Messages
		a. Teacher sending
			i. Group Message
				1) Data Packet: {Type: groupMessage, Session: session, Group: teacher, Data: data}
			ii. Individual Message
				1) Data Packet: {Type: singleMessage, Session: session, Group: teacher, Id: id, Data: data}
		b. Center sending
			i. Message to group
				1) Data Packet: {Type: groupMessage, Session: session, Group: center, Data: data}
			ii. Message to techer privately
				1) Data Packet: {Type: singleMessage, Session: session, Group: center, Data: data}

	5) WebSocket client connections to server
		a) Center Connecting
			i. Data Packet: {Type: centerAdd, Session: session, Name: name}
		b) Teacher Connecting
			i. Data Packet: {Type: teacherAdd, Session: session, Name: name} 




	UI Template
	
	6) Teacher
		a) Maintain a list of center connections on an id basis
			Centers { id: ws, name}
			UI_dict { name: id}
			On the basis of name and id
			Display the name, save the ID

		b)	Each UI component is linked to the name and we use UI dict to find the corresponding websocket to relay the info on
		